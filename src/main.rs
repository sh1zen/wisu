//! wisu: A blazingly fast, minimalist directory tree viewer.
//!
//! This is the main entry point for the wisu application. It handles parsing
//! command-line arguments and dispatching to the appropriate command handler.

mod app;
mod common;
mod utils;
mod workers;

use crate::common::plugins::apply_filter;
use app::Args;
use clap::Parser;
#[cfg(windows)]
use colored::control;
use lscolors::LsColors;

// include generated by build.rs
include!("../plugins/plugins_mod.rs");

/// The main function and entry point of the application.
///
/// It parses command-line arguments and executes the corresponding command.
/// If no subcommand is given, it defaults to the classic tree viewer.
///
/// # Returns
///
/// * `Ok(())` on successful execution.
/// * `Err(anyhow::Error)` if any error occurs during execution.
fn main() -> anyhow::Result<()> {
    // On Windows, explicitly try to enable ANSI support.
    // This may fail on older versions of Windows, but we ignore the error
    // and let the `colored` crate handle it gracefully.
    #[cfg(windows)]
    let _ = control::set_virtual_terminal(true);

    #[cfg(windows)]
    control::set_override(true);

    // Parse the command-line arguments into our Args struct.
    let mut args = apply_filter("parse_args", Args::parse());

    if !args.path.is_dir() {
        anyhow::bail!("'{}' is not a directory.", args.path.display());
    }

    if args.info {
        args.size = true;
    }

    if args.dirs_only {
        args.files = Some(0);
    }

    if args.out.is_some() {
        return workers::export(&args);
    }

    // LsColors instance from the environment
    let ls_colors = LsColors::from_env().unwrap_or_default();

    let res = if args.interactive {
        workers::tui::run(&args, &ls_colors)
    } else {
        workers::view::run(&args, &ls_colors)
    };

    apply_filter("on_exit", res)
}
